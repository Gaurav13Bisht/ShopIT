#----------------------------------Mysql DB configs---------------------------------------

spring.datasource.url=jdbc:mysql://localhost:3306/order_db
#Here order_db is the name of database we created in connection project1

spring.datasource.username=root
spring.datasource.password=root

spring.jpa.show-sql=true
#It shows sql queries for the operation performed

spring.jpa.properties.hibernate.format_sql=true
#Formats the sql queries in better manner

spring.jpa.hibernate.ddl-auto=update
#Without this the table do not get created in D
#Working: https://stackoverflow.com/questions/42135114/how-does-spring-jpa-hibernate-ddl-auto-property-exactly-work-in-spring


#--------------------------------------Server configs------------------------------------------------

#To distinguish each service in service discovery server
spring.application.name=order-service

#If we set server.port as 0 then a random free port gets assigned which is beneficial for multiple instances\
#of same service for load balancing
server.port=0

server.servlet.context-path=/shopIT

#Address of eureka server to register this service to Service Discovery
eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka

#NOTE: To make multiple instances, add run time config for each no. of required configs for the same service
#       and add different -Dserver.port in VM arguments



#--------------------------------------Circuit Breaker Configs---------------------------------------------

#Actuator Properties
#Basically used for health and state monitoring

management.health.circuitbreakers.enabled=true
#This property enables the inclusion of circuit breaker health indicators in the Spring Boot actuator health endpoint.
#By setting it to true, the health endpoint will include information about the status and health of circuit breakers
# in your application.

management.endpoints.web.exposure.include=*
#By setting it to *, all management endpoints, including the circuit breaker endpoints, will be exposed.
#It provides access to various management endpoints, such as health, info, metrics, etc., allowing you to monitor
# and manage different aspects of your application.

management.endpoint.health.show-details=always
#By setting it to always, the health endpoint will display detailed information about the health status of individual
# components, including circuit breakers.


#Resilience4j Properties

resilience4j.circuitbreaker.instances.inventoryCall.registerHealthIndicator=true
#This property enables the registration of a health indicator for the circuit breaker instance "inventoryCall".

resilience4j.circuitbreaker.instances.inventoryCall.slidingWindowType=COUNT_BASED
#This property sets the sliding window type for the circuit breaker instance "inventoryCall" to be count-based.
#The count-based sliding window tracks a fixed number of the most recent calls to the protected resource for decision-making.

resilience4j.circuitbreaker.instances.inventoryCall.slidingWindowSize=5
#This property sets the sliding window size for the circuit breaker instance "inventoryCall" to 5.
#The sliding window size determines the number of recent calls considered by the circuit breaker when making
# decisions to open or close the circuit.

resilience4j.circuitbreaker.instances.inventoryCall.failureRateThreshold=50
#This property sets the failure rate threshold for the circuit breaker instance "inventoryCall" to 50%.
#If the failure rate (percentage of failed calls) exceeds this threshold within the sliding window, the circuit \
#  breaker will open and start short-circuiting subsequent calls.

resilience4j.circuitbreaker.instances.inventoryCall.waitDurationInOpenState=5s
#This property sets the wait duration in the open state for the circuit breaker instance "inventoryCall" to 5 seconds.
#After the circuit breaker opens, it remains in the open state for this duration before transitioning to the half-open state.

resilience4j.circuitbreaker.instances.inventoryCall.permittedNumberOfCallsInHalfOpenState=3
#This property sets the permitted number of calls in the half-open state for the circuit breaker instance
# "inventoryCall" to 3.
#When the circuit breaker transitions to the half-open state, it allows a limited number of calls to the protected
# resource.
# IMP!! :  If any of the permitted calls in the half-open state fail, it interprets this as a sign that the protected
# resource is still experiencing issues.

resilience4j.circuitbreaker.instances.inventoryCall.automaticTransitionFromOpenToHalfOpenEnabled=true
#This property enables automatic transition from the open state to the half-open state for the circuit breaker instance
# "inventoryCall".
# With this enabled, the circuit breaker automatically transitions to the half-open state after the wait duration
# in the open state elapses.